{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","status","query","initialFilter","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoItem","dispatch","className","id","completed","classNames","title","onClick","TodoList","filters","visibleTodos","useMemo","toLowerCase","includes","getVisibleTodos","length","map","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","userId","catch","e","console","log","currentTodoActions","href","email","name","App","data","TodosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ef55db3.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/REMOVE': {\n      return null;\n    }\n\n    case 'currentTodo/SET': {\n      return action.payload;\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype ChangeStatusAction = { type: 'filter/SET', payload: Status };\ntype ChangeQueryAction = { type: 'query/SET' | 'query/CLEAR', payload: string };\ntype Action = ChangeQueryAction | ChangeStatusAction;\ntype State = { query: string, status: Status };\nconst changeStatus = (status: Status): ChangeStatusAction => ({\n  type: 'filter/SET',\n  payload: status,\n});\n\nexport const changeQuery = (query: string): ChangeQueryAction => ({\n  type: 'query/SET',\n  payload: query,\n});\n\nexport const clearQuery = (): ChangeQueryAction => ({\n  type: 'query/CLEAR',\n  payload: '',\n});\nexport const actions = { changeStatus, changeQuery, clearQuery };\n\nconst initialFilter: State = { query: '', status: 'all' };\n\nconst filterReducer = (\n  state: State = initialFilter,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET':\n      return { ...state, status: action.payload };\n    case 'query/SET':\n      return { ...state, query: action.payload };\n    case 'query/CLEAR':\n      return { ...state, query: '' };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype State = Todo[];\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\ntype Action = SetTodosAction;\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...state, ...action.payload];\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const handleSelectTodo = () => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={currentTodo?.id === todo.id\n        ? 'has-background-info-light'\n        : ''}\n    >\n      <td className=\"is-vcentered\">{todo.id}</td>\n      <td className=\"is-vcentered\">\n        {todo.completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames({\n          'has-text-danger': !todo.completed,\n          'has-text-success': todo.completed,\n        })}\n        >\n          {todo.title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={handleSelectTodo}\n        >\n          <span className=\"icon\">\n            <i\n              className={classNames('far', {\n                'fa-eye': currentTodo?.id !== todo.id,\n                'fa-eye-slash': currentTodo?.id === todo.id,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { Status } from '../../types/Status';\nimport { useAppSelector } from '../../app/hooks';\nimport { TodoItem } from './TodoItem';\n\ntype Filters = {\n  query: string,\n  status: Status,\n};\nconst getVisibleTodos = (todos: Todo[], filters: Filters) => {\n  let visibleTodos = [...todos];\n\n  if (filters.query) {\n    visibleTodos = visibleTodos.filter(({ title }) => {\n      return title.toLowerCase().includes(filters.query.toLowerCase());\n    });\n  }\n\n  if (filters.status) {\n    switch (filters.status) {\n      case 'active':\n        visibleTodos = visibleTodos.filter(({ completed }) => !completed);\n        break;\n      case 'completed':\n        visibleTodos = visibleTodos.filter(({ completed }) => completed);\n        break;\n\n      case 'all':\n      default:\n        break;\n    }\n  }\n\n  return visibleTodos;\n};\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const filters = useAppSelector(state => state.filter);\n  const visibleTodos = useMemo(() => getVisibleTodos(todos, filters), [filters]);\n\n  return (\n    <>\n      {visibleTodos.length === 0\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        ) : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th aria-label=\"eye\" />\n              </tr>\n            </thead>\n\n            <tbody>\n              {visibleTodos.map(todo => (\n                <TodoItem todo={todo} />\n              ))}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n\n  const changeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.changeQuery(event.target.value));\n  };\n\n  const clearQuery = () => {\n    dispatch(filterActions.clearQuery());\n  };\n\n  const changeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.changeStatus(event.target.value as Status));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" value={status} onChange={changeStatus}>\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          value={query}\n          onChange={changeQuery}\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {query.length !== 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"clear-search\"\n              onClick={clearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todo = useAppSelector(state => state.currentTodo);\n\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (todo) {\n      getUser(todo.userId)\n        .then(setUser)\n        // eslint-disable-next-line no-console\n        .catch((e) => console.log('Something went wrong', e));\n    }\n  }, []);\n\n  const closeModal = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {(!todo || !user)\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={closeModal}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">{todo?.title}</p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todo?.completed\n                  ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  ) : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n                {' by '}\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as TodosActions } from './features/todos';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    getTodos()\n      .then(data => dispatch(TodosActions.setTodos(data)));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length === 0\n                ? <Loader />\n                : <TodoList todos={todos} />}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}